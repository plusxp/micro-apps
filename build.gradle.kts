/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 */

import org.sonarqube.gradle.SonarQubeTask
import pl.allegro.tech.build.axion.release.domain.TagNameSerializationConfig
import java.text.SimpleDateFormat
import com.google.cloud.tools.jib.api.ImageFormat
import java.util.*

val jacocoVersion: String by project
val jacocoQualityGate: String by project
val gcloudProject: String by project
val baseDockerImage: String by project

plugins {
    id("idea")
    id("application") // implicit `java`

    id("maven-publish")

    // code coverage
    id("jacoco")
    // code quality
    id("org.sonarqube") version "2.8"

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.3.61"

    // Keep dependencies up to date
    // gradle dependencyUpdates -Drevision=release
    id("com.github.ben-manes.versions") version "0.27.0"
    // gradle useLatestVersions
    id("se.patrikerdes.use-latest-versions") version "0.2.13"

    // Versioning & Release with git tags
    // gradle currentVersion
    // gradle release
    id("pl.allegro.tech.build.axion-release") version "1.11.0"

    // Build & Publish docker images
    // gradle jib
    id("com.google.cloud.tools.jib") version "2.0.0"
}

scmVersion {
    useHighestVersion = true

    tag(closureOf<TagNameSerializationConfig> {
        prefix = "" // 'v'
        versionSeparator = ""
    })

    branchVersionIncrementer = mapOf(
            "feature/.*" to "incrementMinor",
            "hotfix/.*" to "incrementPatch",
            "release/.*" to "incrementPrerelease",
            "develop" to "incrementPatch",
            "master" to "incrementMinor"
    )
}

allprojects {
    version = scmVersion.version

    if (!project.hasProperty("release.quiet")) {
        println("Version: $version,  Branch: ${scmVersion.scmPosition.branch}")
    }
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

configurations {
    register("bom")
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

jacoco {
    toolVersion = jacocoVersion
}

sonarqube {
    properties {
        property("sonar.jacoco.reportPaths", "$buildDir/jacoco/test.exec")
        property("sonar.junit.reportPaths", "$buildDir/test-results")
        property("sonar.java.codeCoveragePlugin", "jacoco")
    }
    tasks.sonarqube {
        dependsOn("jacocoTestReport")
    }
}

val sourcesJar = tasks.create<Jar>("sourcesJar") {
    from(sourceSets.main.get().allSource)
    archiveClassifier.set("sources")
}

publishing {
    publications {
        create<MavenPublication>("nexus") {
            from(components["java"])
            artifact(sourcesJar)
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            val releasesRepoUrl = "$buildDir/repos/releases"
            val snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = if (isSnapshot()) uri(snapshotsRepoUrl) else uri(releasesRepoUrl)
        }
    }
}

java {
    // Java 8 needed as Beam doesn't yet support 11
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

application {
    // Define the main class for the application.
    mainClassName = "jvm.gitops.AppKt"
}

jib {
    setAllowInsecureRegistries(true)
    from {
        if(project.hasProperty("baseDockerImage")) {
            image = baseDockerImage
        }
    }
    to {
        image = "xmlking/${rootProject.name}-${project.name}:${project.version}"
        // image = "us.gcr.io/${gcloudProject}/${rootProject.name}/${project.name}:${project.version}"

        /**
        gcr: Google Container Registry (GCR)
        osxkeychain: Docker Hub
         */
        credHelper = "osxkeychain"
        /**
        auth {
        username = "*******"
        password = "*******"
        }
         */
        tags = setOf("${project.version}")
    }
    container {
        jvmFlags = listOf("-Djava.security.egd=file:/dev/./urandom", "-Xms512m", "-server")
        creationTime = "USE_CURRENT_TIMESTAMP"
        mainClass = application.mainClassName
        ports = listOf("8080", "8443")
        labels = mapOf("version" to "${project.version}",  "name" to project.name, "group" to "${project.group}")
        format = ImageFormat.OCI
    }
}

tasks {

    jacocoTestReport {
        reports {
            html.isEnabled = true
            xml.isEnabled = true
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule { limit { minimum = jacocoQualityGate.toBigDecimal() } }
        }
    }

    test {
        finalizedBy("jacocoTestReport")
    }

    check {
        dependsOn("jacocoTestCoverageVerification")
        dependsOn("jacocoTestReport")
    }

    withType<SonarQubeTask> {
        group = "Verification"
        dependsOn("check")
    }

    fun isNonStable(version: String): Boolean {
        val stableKeyword = listOf("RELEASE", "FINAL", "GA").any { version.toUpperCase().contains(it) }
        val regex = "^[0-9,.v-]+(-r)?$".toRegex()
        val isStable = stableKeyword || regex.matches(version)
        return isStable.not()
    }

    dependencyUpdates {
        rejectVersionIf {
            isNonStable(candidate.version)
        }

        // optional parameters
        outputDir = "$buildDir/dependencyUpdates"
        checkForGradleUpdate = true
        revision = "release"
        gradleReleaseChannel = "current"
    }

    jar {
        val sdf = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
        sdf.timeZone = TimeZone.getTimeZone("UTC");

        manifest.attributes.apply {
            put("Build-By", System.getProperty("user.name"))
            put("Build-Date", sdf.format(Date()))
            put("Build-JDK", org.gradle.internal.jvm.Jvm.current())
            put("Build-Revision", scmVersion.scmPosition.shortRevision)
            put("Specification-Title", project.name)
            put("Specification-Version", project.version)
            put("Specification-Vendor", project.group)
            put("Implementation-Title", project.name)
            put("Implementation-Version", project.version)
            put("Implementation-Vendor", project.group)
        }
    }

}

fun Project.isSnapshot() = version.toString().endsWith("-SNAPSHOT")
